generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/shopify_blog_writer/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  firstName     String?
  lastName      String?
  companyName   String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  shopifyStores ShopifyStore[]
  blogs         Blog[]
  articles      Article[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ShopifyStore {
  id          String   @id @default(cuid())
  userId      String
  storeName   String
  storeUrl    String
  accessToken String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blogs    Blog[]
  articles Article[]

  @@unique([userId, storeUrl])
}

model Blog {
  id          String   @id @default(cuid())
  userId      String
  storeId     String
  title       String
  description String?
  status      String   @default("draft")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  store    ShopifyStore @relation(fields: [storeId], references: [id], onDelete: Cascade)
  articles Article[]
  keywords Keyword[]
}

model Article {
  id              String   @id @default(cuid())
  userId          String
  storeId         String
  blogId          String
  title           String
  content         String   @db.Text
  excerpt         String?
  slug            String
  status          String   @default("draft")
  shopifyArticleId String?
  publishedAt     DateTime?
  scheduledAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  store    ShopifyStore @relation(fields: [storeId], references: [id], onDelete: Cascade)
  blog     Blog         @relation(fields: [blogId], references: [id], onDelete: Cascade)
  seoData  SeoData?
  keywords Keyword[]

  @@unique([storeId, slug])
}

model Keyword {
  id                String   @id @default(cuid())
  keyword           String
  searchVolume      Int?
  difficulty        Int?
  cpc              Float?
  competition      String?
  relatedKeywords  String[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  blogs    Blog[]
  articles Article[]
  seoData  SeoData[]

  @@unique([keyword])
}

model SeoData {
  id                    String   @id @default(cuid())
  articleId             String   @unique
  metaTitle             String?
  metaDescription       String?
  focusKeyword          String?
  keywordDensity        Float?
  readabilityScore      Int?
  seoScore              Int?
  suggestions           String[]
  competitorAnalysis    Json?
  serp_data             Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  article  Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  keywords Keyword[]
}

model ApiUsage {
  id          String   @id @default(cuid())
  userId      String
  apiType     String
  endpoint    String
  requestsCount Int    @default(1)
  cost        Float?
  createdAt   DateTime @default(now())

  @@index([userId, apiType, createdAt])
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String
  plan          String
  status        String
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  blogCredits   Int      @default(0)
  usedCredits   Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId])
}
